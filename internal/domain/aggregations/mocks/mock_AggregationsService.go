// Code generated by mockery v2.42.1. DO NOT EDIT.

package aggregations

import (
	aggregations "github.com/leometzger/timescale-cli/internal/domain/aggregations"
	mock "github.com/stretchr/testify/mock"
)

// MockAggregationsService is an autogenerated mock type for the AggregationsService type
type MockAggregationsService struct {
	mock.Mock
}

type MockAggregationsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAggregationsService) EXPECT() *MockAggregationsService_Expecter {
	return &MockAggregationsService_Expecter{mock: &_m.Mock}
}

// GetAggregations provides a mock function with given fields: filter
func (_m *MockAggregationsService) GetAggregations(filter *aggregations.AggregationsFilter) ([]aggregations.ContinuousAggregationInfo, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregations")
	}

	var r0 []aggregations.ContinuousAggregationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*aggregations.AggregationsFilter) ([]aggregations.ContinuousAggregationInfo, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(*aggregations.AggregationsFilter) []aggregations.ContinuousAggregationInfo); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.ContinuousAggregationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*aggregations.AggregationsFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAggregationsService_GetAggregations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAggregations'
type MockAggregationsService_GetAggregations_Call struct {
	*mock.Call
}

// GetAggregations is a helper method to define mock.On call
//   - filter *aggregations.AggregationsFilter
func (_e *MockAggregationsService_Expecter) GetAggregations(filter interface{}) *MockAggregationsService_GetAggregations_Call {
	return &MockAggregationsService_GetAggregations_Call{Call: _e.mock.On("GetAggregations", filter)}
}

func (_c *MockAggregationsService_GetAggregations_Call) Run(run func(filter *aggregations.AggregationsFilter)) *MockAggregationsService_GetAggregations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregations.AggregationsFilter))
	})
	return _c
}

func (_c *MockAggregationsService_GetAggregations_Call) Return(_a0 []aggregations.ContinuousAggregationInfo, _a1 error) *MockAggregationsService_GetAggregations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAggregationsService_GetAggregations_Call) RunAndReturn(run func(*aggregations.AggregationsFilter) ([]aggregations.ContinuousAggregationInfo, error)) *MockAggregationsService_GetAggregations_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: conf
func (_m *MockAggregationsService) Refresh(conf *aggregations.RefreshConfig) error {
	ret := _m.Called(conf)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*aggregations.RefreshConfig) error); ok {
		r0 = rf(conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAggregationsService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAggregationsService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - conf *aggregations.RefreshConfig
func (_e *MockAggregationsService_Expecter) Refresh(conf interface{}) *MockAggregationsService_Refresh_Call {
	return &MockAggregationsService_Refresh_Call{Call: _e.mock.On("Refresh", conf)}
}

func (_c *MockAggregationsService_Refresh_Call) Run(run func(conf *aggregations.RefreshConfig)) *MockAggregationsService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*aggregations.RefreshConfig))
	})
	return _c
}

func (_c *MockAggregationsService_Refresh_Call) Return(_a0 error) *MockAggregationsService_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAggregationsService_Refresh_Call) RunAndReturn(run func(*aggregations.RefreshConfig) error) *MockAggregationsService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAggregationsService creates a new instance of MockAggregationsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAggregationsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAggregationsService {
	mock := &MockAggregationsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
